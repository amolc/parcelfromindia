{"version":3,"sources":["./src/app/pages/add-address/add-address.component.html","./src/app/pages/login/login.component.html","./src/app/pages/register/register.component.html","./src/app/pages/resetpassword/resetpassword.component.html","./src/app/layouts/auth-layout/auth-layout.module.ts","./src/app/layouts/auth-layout/auth-layout.routing.ts","./src/app/pages/add-address/add-address.component.css","./src/app/pages/add-address/add-address.component.ts","./src/app/pages/login/login.component.scss","./src/app/pages/login/login.component.ts","./src/app/pages/register/register.component.scss","./src/app/pages/register/register.component.ts","./src/app/pages/resetpassword/resetpassword.component.css","./src/app/pages/resetpassword/resetpassword.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,u3BAAwzB,mbAAmb,sJAAsJ,mBAAmB,0BAA0B,cAAc,cAAc,4BAA4B,qIAAqI,kBAAkB,cAAc,o4BAAo4B,iBAAiB,swBAAswB,iBAAiB,y7BAAy7B,iBAAiB,y6BAAy6B,iBAAiB,+yBAA+yB,iBAAiB,g2BAAg2B,iBAAiB,qzBAAqzB,iBAAiB,g2BAAg2B,iBAAiB,04BAA04B,iBAAiB,8MAA8M,46BAA46B,sJAAsJ,mBAAmB,0BAA0B,cAAc,cAAc,4BAA4B,2hBAA2hB,wBAAwB,qcAAqc,iBAAiB,2aAA2a,wBAAwB,4bAA4b,iBAAiB,qlBAAqlB,4BAA4B,qeAAqe,iBAAiB,8hBAA8hB,8BAA8B,ueAAue,iBAAiB,kdAAkd,sBAAsB,odAAod,iBAAiB,waAAwa,wBAAwB,4bAA4b,iBAAiB,odAAod,4BAA4B,6aAA6a,iBAAiB,+cAA+c,oCAAoC,ufAAuf,iBAAiB,6hBAA6hB,0BAA0B,+cAA+c,iBAAiB,+JAA+J,yX;;;;;;;;;;;;ACA/ynB;AAAe,u8DAAw4D,iBAAiB,+4BAA+4B,iBAAiB,sjC;;;;;;;;;;;;ACAx0F;AAAe,2/DAA47D,iBAAiB,s3BAAs3B,iBAAiB,62BAA62B,iBAAiB,w2BAAw2B,iBAAiB,63BAA63B,iBAAiB,ssC;;;;;;;;;;;;ACAx+K;AAAe,0gEAA28D,iBAAiB,kwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAl8D;AACM;AACA;AACmB;AACT;AAED;AACxD,iDAAiD;AACkB;AACS;AACQ;AACO;AAkB3F;IAAA;IAAgC,CAAC;IAApB,gBAAgB;QAjB5B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,4DAAY,CAAC,QAAQ,CAAC,qEAAgB,CAAC;gBACvC,0DAAW;gBACX,YAAY;gBACZ,kEAAmB;gBACnB,qEAAgB;aAEjB;YACD,YAAY,EAAE;gBACZ,2EAAc;gBACd,oFAAiB;gBACjB,4FAAmB;gBACnB,mGAAsB;aACvB;SACF,CAAC;OACW,gBAAgB,CAAI;IAAD,uBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;AC3BsC;AACS;AACQ;AACO;AACpF,IAAM,gBAAgB,GAAW;IACpC,EAAE,IAAI,EAAE,OAAO,EAAW,SAAS,EAAE,2EAAc,EAAE;IACrD,EAAE,IAAI,EAAE,UAAU,EAAQ,SAAS,EAAE,oFAAiB,EAAE;IACxD,EAAE,IAAI,EAAE,YAAY,EAAQ,SAAS,EAAE,4FAAmB,EAAE;IAC5D,EAAE,IAAI,EAAE,OAAO,EAAQ,SAAS,EAAE,mGAAsB,EAAG;CAC9D,CAAC;;;;;;;;;;;;;ACXF;AAAe,6GAA8C,mK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAX;AACgC;AAChC;AACT;AAMzC;IAME,6BACS,WAAwB,EACvB,IAAgB,EACjB,MAAc;QAFd,gBAAW,GAAX,WAAW,CAAa;QACvB,SAAI,GAAJ,IAAI,CAAY;QACjB,WAAM,GAAN,MAAM,CAAQ;QANvB,mBAAc,GAAQ,EAAE,CAAC;QAUzB,UAAK,GAAG,EAAE,CAAC;QACX,UAAK,GAAG,EAAE,CAAC;QACX,YAAO,GAAG,EAAE,CAAC;QACb,aAAQ,GAAG,EAAE,CAAC;QACd,SAAI,GAAG,EAAE,CAAC;QACV,UAAK,GAAG,EAAE,CAAC;QACX,YAAO,GAAG,EAAE,CAAC;QACb,WAAM,GAAG,EAAE,CAAC;QACZ,gBAAW,GAAG,EAAE,CAAC;QAVf,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAWD,wCAAU,GAAV,UAAW,KAAK;QACd,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,IAAI,KAAK,EAAE;YAC/B,2DAA2D;YAC3D,2DAA2D;YAC3D,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC;gBACjD,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC;gBACnD,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC;gBACvD,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC;gBACzD,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;gBACjD,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC;gBACnD,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC;gBACvD,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC;gBACrD,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SACnE;aAAM;YACL,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBACjB,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBACnB,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACrB,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACtB,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBAClB,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBACnB,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACrB,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACpB,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC;SAC7B;IACH,CAAC;IAED,kDAAoB,GAApB;QACE,IAAI,CAAC,cAAc,GAAG;YACpB,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;YAChE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;YAE3D,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC;YACjE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;YACnE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,oBAAoB,EAAE,CAAC;YAC3D,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC;YAC7D,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC;YACjE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,2BAA2B,EAAE,CAAC;YACzE,MAAM,EAAE;gBACN,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,6BAA6B,EAAE;gBAC5D,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,+BAA+B,EAAE;gBAC/D,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,+BAA+B,EAAE;aAChE;YAED,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;YACzE,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;YAEpE,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC;YAC1E,iBAAiB,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;YAC5E,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,oBAAoB,EAAE,CAAC;YACpE,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC;YACtE,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC;YAC1E,oBAAoB,EAAE;gBACpB,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,2BAA2B,EAAE;aAC3D;YACD,eAAe,EAAE;gBACf,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,6BAA6B,EAAE;gBAC5D,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,+BAA+B,EAAE;gBAC/D,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,+BAA+B,EAAE;aAChE;SAKF,CAAC;QACF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACvC,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YACrE,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAErE,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YACvE,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YACxE,IAAI,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YACpE,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YACrE,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YACvE,WAAW,EAAE,IAAI,0DAAW,CAC1B,EAAE,EACF,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAC1C;YACD,MAAM,EAAE,IAAI,0DAAW,CACrB,EAAE,EACF,yDAAU,CAAC,OAAO,CAAC;gBACjB,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;gBACxB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;aACzB,CAAC,CACH;YACD,cAAc,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC9E,cAAc,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAE9E,gBAAgB,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChF,iBAAiB,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YACjF,aAAa,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7E,cAAc,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC9E,gBAAgB,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChF,oBAAoB,EAAE,IAAI,0DAAW,CACnC,EAAE,EACF,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAC1C;YACD,eAAe,EAAE,IAAI,0DAAW,CAC9B,EAAE,EACF,yDAAU,CAAC,OAAO,CAAC;gBACjB,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;gBACxB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;aACzB,CAAC,CACH;SAEF,CAAC,CAAC;IACL,CAAC;IACD,sCAAQ,GAAR,cAAmB,CAAC;IACpB,oCAAM,GAAN;QAAA,iBA0EC;QAzEC,IAAI,CAAC,MAAM,GAAG;YACZ,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK;YAC3C,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK;YAC3C,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK;YAC/C,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK;YACjD,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK;YAE7C,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK;YACzC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK;YAC3C,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK;YAC/C,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK;YAEvD,cAAc,EACZ,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,IAAI,EAAE;gBACjD,CAAC,CAAC,IAAI,CAAC,KAAK;gBACZ,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK;YAEnD,cAAc,EACZ,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,IAAI,EAAE;gBACjD,CAAC,CAAC,IAAI,CAAC,KAAK;gBACZ,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK;YAEnD,gBAAgB,EACd,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,IAAI,EAAE;gBACnD,CAAC,CAAC,IAAI,CAAC,OAAO;gBACd,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK;YAErD,iBAAiB,EACf,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,iBAAiB,CAAC,KAAK,IAAI,EAAE;gBACpD,CAAC,CAAC,IAAI,CAAC,QAAQ;gBACf,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,iBAAiB,CAAC,KAAK;YAEtD,eAAe,EACb,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,IAAI,EAAE;gBAClD,CAAC,CAAC,IAAI,CAAC,MAAM;gBACb,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK;YAEpD,aAAa,EACX,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,IAAI,EAAE;gBAChD,CAAC,CAAC,IAAI,CAAC,IAAI;gBACX,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK;YAElD,cAAc,EACZ,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,IAAI,EAAE;gBACjD,CAAC,CAAC,IAAI,CAAC,KAAK;gBACZ,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK;YAEnD,gBAAgB,EACd,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,IAAI,EAAE;gBACnD,CAAC,CAAC,IAAI,CAAC,OAAO;gBACd,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK;YAErD,oBAAoB,EAClB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,IAAI,EAAE;gBACvD,CAAC,CAAC,IAAI,CAAC,WAAW;gBAClB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK;SAE1D,CAAC;QACF,2BAA2B;QAC3B,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,oDAAoD,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,gBAAM;gBAChG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;gBAC9B,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC;YACzC,CAAC,EACC,aAAG;gBACD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACjB,KAAK,CAAC,oBAAoB,CAAC,CAAC;gBAC5B,eAAe;YACjB,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;IAGL,CAAC;;gBAvMqB,0DAAW;gBACjB,+DAAU;gBACT,sDAAM;;IATZ,mBAAmB;QAL/B,+DAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;YAC3B,qMAA2C;;SAE5C,CAAC;yCAQsB,0DAAW;YACjB,+DAAU;YACT,sDAAM;OATZ,mBAAmB,CA+M/B;IAAD,0BAAC;CAAA;AA/M+B;;;;;;;;;;;;;ACThC;AAAe,6GAA8C,mJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACoB;AAC/B;AACT;AAMzC;IAIE,wBAAmB,MAAc,EAAS,WAAwB,EAAU,IAAgB;QAAzE,WAAM,GAAN,MAAM,CAAQ;QAAS,gBAAW,GAAX,WAAW,CAAa;QAAU,SAAI,GAAJ,IAAI,CAAY;QAF5F,mBAAc,GAAQ,EAAE,CAAC;QAGvB,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED,iCAAQ,GAAR;IACA,CAAC;IACD,2CAAkB,GAAlB;QACE,IAAI,CAAC,cAAc,GAAG;YACpB,KAAK,EAAE;gBACL,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE;gBAClD,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,0BAA0B,EAAE;aACzD;YAED,QAAQ,EAAE;gBACR,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,sBAAsB,EAAE;aACtD;SACF,CAAC;QACF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CACrC;YACE,KAAK,EAAE,IAAI,0DAAW,CACpB,EAAE,EACF,yDAAU,CAAC,OAAO,CAAC;gBACjB,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,OAAO,CAAC,0FAA0F,CAAC;aAC/G,CAAC,CACH;YACD,QAAQ,EAAE,IAAI,0DAAW,CACvB,EAAE,EACF,yDAAU,CAAC,OAAO,CAAC;gBACjB,yDAAU,CAAC,QAAQ;aACpB,CAAC,CACH;SACF,CACF,CAAC;IACJ,CAAC;IAED,gCAAO,GAAP;QAAA,iBAmBC;QAlBC,IAAI,CAAC,MAAM,GAAG;YACZ,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK;YACnC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ;SAE1C;QACD,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,qDAAqD,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,gBAAM;gBACjG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;gBAC9B,wEAAwE;gBAExE,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;YAC1C,CAAC,EACC,aAAG;gBACD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACjB,KAAK,CAAC,yCAAyC,CAAC,CAAC;YACnD,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,iCAAQ,GAAR;QACE,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACxB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;IACzC,CAAC;;gBA5D0B,sDAAM;gBAAsB,0DAAW;gBAAgB,+DAAU;;IAJjF,cAAc;QAL1B,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,mLAAqC;;SAEtC,CAAC;yCAK2B,sDAAM,EAAsB,0DAAW,EAAgB,+DAAU;OAJjF,cAAc,CAkE1B;IAAD,qBAAC;CAAA;AAlE0B;;;;;;;;;;;;;ACT3B;AAAe,6GAA8C,2J;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAX;AAC+B;AAC/B;AACT;AAMzC;IAKE,2BAAmB,MAAc,EACxB,WAAwB,EAAU,IAAgB;QADxC,WAAM,GAAN,MAAM,CAAQ;QACxB,gBAAW,GAAX,WAAW,CAAa;QAAU,SAAI,GAAJ,IAAI,CAAY;QAH3D,mBAAc,GAAQ,EAAE,CAAC;QAIvB,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED,oCAAQ,GAAR;IACA,CAAC;IACD,8CAAkB,GAAlB;QACE,IAAI,CAAC,cAAc,GAAG;YAGpB,KAAK,EAAE;gBACL,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,wBAAwB,EAAE;aACxD;YACD,KAAK,EAAE;gBACL,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE;aACnD;YACD,KAAK,EAAE;gBACL,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,4BAA4B,EAAE;gBAC3D,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,+BAA+B,EAAE;gBAC/D,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,+BAA+B,EAAE;aAChE;YACD,MAAM,EAAE;gBACN,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,6BAA6B,EAAE;gBAC5D,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,+BAA+B,EAAE;gBAC/D,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,+BAA+B,EAAE;aAChE;YACD,KAAK,EAAE;gBACL,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE;gBAClD,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,0BAA0B,EAAE;aACzD;YAED,QAAQ,EAAE;gBACR,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE;gBACtD,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,8BAA8B,EAAE;gBAC9D,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,+BAA+B,EAAE;aAChE;YACD,SAAS,EAAE;gBACT,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE;aACvD;SAMF,CAAC;QACF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CACtC;YACE,KAAK,EAAE,IAAI,0DAAW,CACpB,EAAE,EACF,yDAAU,CAAC,OAAO,CAAC;gBACjB,yDAAU,CAAC,QAAQ;aACpB,CAAC,CACH;YACD,KAAK,EAAE,IAAI,0DAAW,CACpB,EAAE,EACF,yDAAU,CAAC,OAAO,CAAC;gBACjB,yDAAU,CAAC,QAAQ;aACpB,CAAC,CACH;YAED,MAAM,EAAE,IAAI,0DAAW,CACrB,EAAE,EACF,yDAAU,CAAC,OAAO,CAAC;gBACjB,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;gBACxB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;aACzB,CAAC,CACH;YACD,KAAK,EAAE,IAAI,0DAAW,CACpB,EAAE,EACF,yDAAU,CAAC,OAAO,CAAC;gBACjB,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,OAAO,CAAC,0FAA0F,CAAC;aAC/G,CAAC,CACH;YAED,QAAQ,EAAE,IAAI,0DAAW,CACvB,EAAE,EACF,yDAAU,CAAC,OAAO,CAAC;gBACjB,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;aACzB,CAAC,CACH;SAeF,CACF,CAAC;IACJ,CAAC;IAGD,sCAAU,GAAV;QAAA,iBA2BC;QAxBC,IAAI,CAAC,MAAM,GAAG;YACZ,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK;YAC7C,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK;YAC7C,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK;YAE/C,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK;YAC7C,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK;YACnD,WAAW,EAAE,GAAG;SAIjB;QACD,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,sDAAsD,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,gBAAM;gBAClG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;gBAC9B,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;YACrC,CAAC,EACC,aAAG;gBACD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACjB,KAAK,CAAC,iCAAiC,CAAC,CAAC;gBACzC,eAAe;YACjB,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,kCAAM,GAAN;QACE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;;gBAvI0B,sDAAM;gBACX,0DAAW;gBAAgB,+DAAU;;IANhD,iBAAiB;QAL7B,+DAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,4LAAwC;;SAEzC,CAAC;yCAM2B,sDAAM;YACX,0DAAW,EAAgB,+DAAU;OANhD,iBAAiB,CA6I7B;IAAD,wBAAC;CAAA;AA7I6B;;;;;;;;;;;;;ACT9B;AAAe,6GAA8C,uK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAX;AAC+B;AAC/B;AACT;AAMzC;IAKE,gCAAmB,MAAc,EAAQ,WAAwB,EAAU,IAAgB;QAAxE,WAAM,GAAN,MAAM,CAAQ;QAAQ,gBAAW,GAAX,WAAW,CAAa;QAAU,SAAI,GAAJ,IAAI,CAAY;QAF3F,mBAAc,GAAQ,EAAE,CAAC;QAGvB,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC3B,CAAC;IAEF,yCAAQ,GAAR;IACA,CAAC;IACD,mDAAkB,GAAlB;QACE,IAAI,CAAC,cAAc,GAAG;YACpB,KAAK,EAAE;gBACL,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE;gBAClD,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,0BAA0B,EAAE;aACzD;SAGF,CAAC;QACF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CACrC;YACE,KAAK,EAAE,IAAI,0DAAW,CACpB,EAAE,EACF,yDAAU,CAAC,OAAO,CAAC;gBACjB,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,OAAO,CAAC,0FAA0F,CAAC;aAC/G,CAAC,CACH;SAEF,CACF,CAAC;IACJ,CAAC;IAED,wCAAO,GAAP;QAAA,iBAgBC;QAfC,IAAI,CAAC,MAAM,GAAG;YACZ,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK;SAEpC;QACD,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,6CAA6C,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,gBAAM;gBACzF,OAAO,CAAC,GAAG,CAAC,MAAM,EAAC,QAAQ,CAAC,CAAC;gBAC7B,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;YAC3C,CAAC,EACC,aAAG;gBACD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACjB,KAAK,CAAC,yCAAyC,CAAC,CAAC;YACnD,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;;gBA7C0B,sDAAM;gBAAqB,0DAAW;gBAAgB,+DAAU;;IALhF,sBAAsB;QALlC,+DAAS,CAAC;YACT,QAAQ,EAAE,mBAAmB;YAC7B,2MAA6C;;SAE9C,CAAC;yCAM2B,sDAAM,EAAqB,0DAAW,EAAgB,+DAAU;OALhF,sBAAsB,CAsDlC;IAAD,6BAAC;CAAA;AAtDkC","file":"layouts-auth-layout-auth-layout-module.js","sourcesContent":["export default \"<div class=\\\"header bg-gradient-danger pb-8 pt-5 pt-md-8\\\">\\n  <div class=\\\"container-fluid\\\">\\n    <div class=\\\"header-body\\\">\\n      <!-- Card stats -->\\n\\n    </div>\\n  </div>\\n</div>\\n<!-- Page content -->\\n<div class=\\\"container-fluid mt--7\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      <div class=\\\"card shadow border-0\\\">\\n\\n        <div class=\\\"container clearfix py-5\\\">\\n          <div class=\\\"m-portlet__head\\\">\\n            <div class=\\\"m-portlet__head-caption\\\">\\n              <div class=\\\"m-portlet__head-title\\\">\\n                <h3 class=\\\"m-portlet__head-text\\\">\\n                  One Step Away From Getting Your Loved Stuff!\\n                </h3>\\n              </div>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"container clearfix divcenter\\\" style=\\\"max-width: 900px;\\\">\\n            <div class=\\\" nobottommargin\\\">\\n              <form class=\\\"m-form m-form--fit m-form--label-align-right m-form--group-seperator-dashed\\\"\\n                autocomplete=\\\"off\\\" [formGroup]=\\\"addresForm\\\" (ngSubmit)=\\\"addres()\\\">\\n                <div class=\\\"m-portlet__body\\\">\\n                  <div class=\\\"form-group m-form__group row\\\">\\n                    <div class=\\\"m-radio-inline\\\" style=\\\"margin-top: 15px;\\\">\\n                      <span class=\\\"m-badge m-badge--primary m-badge--wide m-badge--rounded\\\"\\n                        style=\\\"margin-left: 10px; font-size: 1.2rem;font-family: 'Montserrat'; width: 200px;padding: 12px; background-color:burlywood; \\\">\\n                        BILLING ADDRESS\\n                      </span><br>\\n                      <div style=\\\"margin-top:25px; margin-left:15px;color:#db1a20;\\\">\\n                        <p>All fields are mandatory</p>\\n                      </div>\\n                    </div>\\n                  </div>\\n                  <div class=\\\"form-group m-form__group row\\\">\\n\\n                    <div class=\\\"col-lg-6 col-md-4\\\">\\n\\n                      <label>\\n                        First Name:\\n                      </label>\\n                      <input type=\\\"text\\\" class=\\\"form-control m-input\\\" placeholder=\\\"Enter first name\\\" name=\\\"fname\\\"\\n                        id=\\\"fname\\\" formControlName=\\\"fname\\\" required>\\n                    </div>\\n                    <ng-container *ngFor=\\\"let error of error_messages.fname\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('fname').hasError(error.type) &&\\n                    (addresForm.get('fname').dirty || addresForm.get('fname').touched)\\\">\\n                        {{ error.message }}\\n                      </div>\\n                    </ng-container>\\n                    <div class=\\\"col-lg-6 col-md-4 topgap\\\">\\n                      <label class=\\\"\\\">\\n                        Last Name:\\n                      </label>\\n                      <input type=\\\"text\\\" class=\\\"form-control m-input\\\" placeholder=\\\"Enter last name\\\" name=\\\"lname\\\"\\n                        id=\\\"lname\\\" formControlName=\\\"lname\\\" required>\\n                    </div>\\n                    <ng-container *ngFor=\\\"let error of error_messages.lname\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('lname').hasError(error.type) &&\\n                       (addresForm.get('lname').dirty || addresForm.get('lname').touched)\\\">\\n                        {{ error.message }}\\n                      </div>\\n                    </ng-container>\\n                  </div>\\n                  <div class=\\\"form-group m-form__group row topgap\\\">\\n                    <div class=\\\"col-lg-12 col-md-10\\\">\\n                      <label>\\n                        address\\n                      </label>\\n                      <textarea type=\\\"text\\\" rows=\\\"4\\\" class=\\\"form-control\\\"\\n                        placeholder=\\\"Please enter House/Flat Number, Building Name/ Apartment Name\\\" name=\\\"address\\\"\\n                        id=\\\"address\\\" formControlName=\\\"address\\\" required></textarea>\\n\\n                    </div>\\n                    <ng-container *ngFor=\\\"let error of error_messages.address\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('address').hasError(error.type) &&\\n                    (addresForm.get('address').dirty || addresForm.get('address').touched)\\\">\\n                        {{ error.message }}\\n                      </div>\\n                    </ng-container>\\n                  </div>\\n                  <div class=\\\"form-group m-form__group row topgap\\\">\\n                    <div class=\\\"col-lg-12 col-md-10\\\">\\n                      <label>\\n                        2nd address\\n                      </label>\\n                      <textarea type=\\\"text\\\" rows=\\\"4\\\" class=\\\"form-control\\\"\\n                        placeholder=\\\"Please enter Street Name, Locality\\\" name=\\\"address2\\\" id=\\\"address2\\\"\\n                        formControlName=\\\"address2\\\" required></textarea>\\n\\n                    </div>\\n                    <ng-container *ngFor=\\\"let error of error_messages.address2\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('address2').hasError(error.type) &&\\n                    (addresForm.get('address2').dirty || addresForm.get('address2').touched)\\\">\\n                        {{ error.message }}\\n                      </div>\\n                    </ng-container>\\n                  </div>\\n\\n                  <div class=\\\"form-group m-form__group row topgap\\\">\\n                    <div class=\\\"col-lg-6 col-md-4\\\">\\n                      <label>\\n                        City\\n                      </label>\\n                      <input type=\\\"text\\\" class=\\\"form-control m-input\\\" placeholder=\\\"Enter City\\\" name=\\\"city\\\" id=\\\"city\\\"\\n                        formControlName=\\\"city\\\" required>\\n                      <ng-container *ngFor=\\\"let error of error_messages.city\\\">\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('city').hasError(error.type) &&\\n                       (addresForm.get('city').dirty || addresForm.get('city').touched)\\\">\\n                          {{ error.message }}\\n                        </div>\\n                      </ng-container>\\n                      <div class=\\\"clearfix\\\"></div>\\n\\n\\n\\n                    </div>\\n                    <div class=\\\"col-lg-6 col-md-4 topgap\\\">\\n                      <label class=\\\"\\\">\\n                        State\\n                      </label>\\n                      <input type=\\\"text\\\" class=\\\"form-control m-input\\\" placeholder=\\\"Enter state name\\\" name=\\\"state\\\"\\n                        id=\\\"state\\\" formControlName=\\\"state\\\" required>\\n\\n                    </div>\\n                    <ng-container *ngFor=\\\"let error of error_messages.state\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('state').hasError(error.type) &&\\n                       (addresForm.get('state').dirty || addresForm.get('state').touched)\\\">\\n                        {{ error.message }}\\n                      </div>\\n                    </ng-container>\\n                  </div>\\n                  <div class=\\\"form-group m-form__group row topgap\\\">\\n                    <div class=\\\"col-lg-6 col-md-4\\\">\\n                      <label>\\n                        Country\\n                      </label>\\n                      <input type=\\\"text\\\" name=\\\"country\\\" id=\\\"country\\\" class=\\\"form-control\\\" required\\n                        formControlName=\\\"country\\\">\\n                    </div>\\n                    <ng-container *ngFor=\\\"let error of error_messages.country\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('country').hasError(error.type) &&\\n                    (addresForm.get('country').dirty || addresForm.get('country').touched)\\\">\\n                        {{ error.message }}\\n                      </div>\\n                    </ng-container>\\n                    <div class=\\\"col-lg-6 col-md-4 topgap\\\">\\n                      <label class=\\\"\\\">\\n                        postcode\\n                      </label>\\n                      <input type=\\\"text\\\" class=\\\"form-control m-input\\\" placeholder=\\\"Enter postcode\\\" name=\\\"postal_code\\\"\\n                        id=\\\"postal_code\\\" formControlName=\\\"postal_code\\\" required>\\n                      <div class=\\\"clearfix\\\"></div>\\n                    </div>\\n                    <ng-container *ngFor=\\\"let error of error_messages.postal_code\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('postal_code').hasError(error.type) &&\\n                    (addresForm.get('postal_code').dirty || addresForm.get('postal_code').touched)\\\">\\n                        {{ error.message }}\\n                      </div>\\n                    </ng-container>\\n                  </div>\\n                  <div class=\\\"form-group m-form__group row topgap\\\">\\n\\n                    <div class=\\\"col-lg-6 col-md-4 topgap\\\">\\n                      <label class=\\\"\\\">\\n                        Mobile Number\\n                      </label>\\n                      <input type=\\\"text\\\" class=\\\"form-control m-input\\\" placeholder=\\\"Enter your mobile number\\\"\\n                        name=\\\"mobile\\\" id=\\\"mobile\\\" formControlName=\\\"mobile\\\" required>\\n                    </div>\\n                  </div>\\n                  <ng-container *ngFor=\\\"let error of error_messages.mobile\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('mobile').hasError(error.type) &&\\n                 (addresForm.get('mobile').dirty || addresForm.get('mobile').touched)\\\">\\n                      {{ error.message }}\\n                    </div>\\n                  </ng-container>\\n\\n                  <div class=\\\"form-group m-form__group row\\\">\\n                    <div class=\\\"m-radio-inline\\\" style=\\\"margin-top: 20px;\\\">\\n\\n                      <label>\\n                        Is Shipping Address Same As Billing Address?\\n                        <span></span>\\n                      </label>\\n                      <label class=\\\"m-radio\\\">\\n                        <input type=\\\"radio\\\" name=\\\"same\\\" class=\\\"same\\\" id=\\\"same\\\" value=\\\"yes\\\" (click)=\\\"checkvalue($event)\\\">\\n                        Yes\\n                        <span></span>\\n                      </label>\\n                      <label class=\\\"m-radio\\\">\\n                        <input type=\\\"radio\\\" name=\\\"same\\\" class=\\\"same\\\" id=\\\"same\\\" value=\\\"no\\\" (click)=\\\"checkvalue($event)\\\">\\n\\n                        No\\n                        <span></span>\\n                      </label>\\n                    </div>\\n                  </div>\\n\\n                  <div class=\\\"form-group m-form__group row\\\">\\n                    <div class=\\\"m-radio-inline\\\" style=\\\"margin-top: 15px;\\\">\\n                      <span class=\\\"m-badge m-badge--primary m-badge--wide m-badge--rounded\\\"\\n                        style=\\\"margin-left: 10px; font-size: 1.2rem;font-family: 'Montserrat'; width: 200px;padding: 12px; background-color:burlywood; \\\">\\n                        SHIPPING ADDRESS\\n                      </span>\\n                    </div>\\n                  </div>\\n                  <div class=\\\"form-group m-form__group row\\\">\\n                    <div class=\\\"col-lg-6 col-md-4\\\">\\n                      <label>\\n                        First Name\\n                      </label>\\n                      <input type=\\\"text\\\" class=\\\"form-control m-input\\\" placeholder=\\\"Enter first name\\\"\\n                        name=\\\"shipping_fname\\\" id=\\\"shipping_fname\\\" value=\\\"{{fname==null?null:fname}}\\\" required\\n                        formControlName=\\\"shipping_fname\\\" required>\\n                    </div>\\n                    <ng-container *ngFor=\\\"let error of error_messages.shipping_fname\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('shipping_fname').hasError(error.type) &&\\n                    (addresForm.get('shipping_fname').dirty || addresForm.get('shipping_fname').touched)\\\">\\n                        {{ error.message }}\\n                      </div>\\n                    </ng-container>\\n                    <div class=\\\"col-lg-6 col-md-4 topgap\\\">\\n                      <label class=\\\"\\\">\\n                        Last Name\\n                      </label>\\n                      <input type=\\\"text\\\" class=\\\"form-control m-input\\\" placeholder=\\\"Enter last name\\\"\\n                        name=\\\"shipping_lname\\\" id=\\\"shipping_lname\\\" value=\\\"{{lname==null?null:lname}}\\\"\\n                        formControlName=\\\"shipping_lname\\\" required>\\n                    </div>\\n                    <ng-container *ngFor=\\\"let error of error_messages.shipping_lname\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('shipping_lname').hasError(error.type) &&\\n                    (addresForm.get('shipping_lname').dirty || addresForm.get('shipping_lname').touched)\\\">\\n                        {{ error.message }}\\n                      </div>\\n                    </ng-container>\\n                  </div>\\n                  <div class=\\\"form-group m-form__group row topgap\\\">\\n                    <div class=\\\"col-lg-12 col-md-10\\\">\\n                      <label>\\n                        Shipping Address1\\n                      </label>\\n                      <textarea type=\\\"text\\\" rows=\\\"4\\\" class=\\\"form-control\\\"\\n                        placeholder=\\\"Please enter House/Flat Number, Building Name/ Apartment Name\\\"\\n                        name=\\\"shipping_address\\\" id=\\\"shipping_address\\\" value=\\\"{{address==null?null:address}}\\\"\\n                        formControlName=\\\"shipping_address\\\" required></textarea>\\n                    </div>\\n                  </div>\\n                  <ng-container *ngFor=\\\"let error of error_messages.shipping_address\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('shipping_address').hasError(error.type) &&\\n                    (addresForm.get('shipping_address').dirty || addresForm.get('shipping_address').touched)\\\">\\n                      {{ error.message }}\\n                    </div>\\n                  </ng-container>\\n                  <div class=\\\"form-group m-form__group row topgap\\\">\\n                    <div class=\\\"col-lg-12 col-md-10\\\">\\n                      <label>\\n                        Shipping Address2\\n                      </label>\\n                      <textarea type=\\\"text\\\" rows=\\\"4\\\" class=\\\"form-control\\\"\\n                        placeholder=\\\"Please enter Street Name, Locality\\\" name=\\\"shipping_address2\\\" id=\\\"shipping_address2\\\"\\n                        value=\\\"{{address2==null?null:address2}}\\\" formControlName=\\\"shipping_address2\\\"\\n                        required></textarea>\\n                    </div>\\n                  </div>\\n                  <ng-container *ngFor=\\\"let error of error_messages.shipping_address2\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('shipping_address2').hasError(error.type) &&\\n                 (addresForm.get('shipping_address2').dirty || addresForm.get('shipping_address2').touched)\\\">\\n                      {{ error.message }}\\n                    </div>\\n                  </ng-container>\\n\\n                  <div class=\\\"form-group m-form__group row topgap\\\">\\n                    <div class=\\\"col-lg-6 col-md-4\\\">\\n                      <label>\\n                        City\\n                      </label>\\n                      <input type=\\\"text\\\" class=\\\"form-control m-input\\\" placeholder=\\\"Enter City\\\" name=\\\"shipping_city\\\"\\n                        id=\\\"shipping_city\\\" value=\\\"{{city==null?null:city}}\\\" formControlName=\\\"shipping_city\\\" required>\\n                      <div class=\\\"clearfix\\\"></div>\\n                    </div>\\n                    <ng-container *ngFor=\\\"let error of error_messages.shipping_city\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('shipping_city').hasError(error.type) &&\\n                    (addresForm.get('shipping_city').dirty || addresForm.get('shipping_city').touched)\\\">\\n                        {{ error.message }}\\n                      </div>\\n                    </ng-container>\\n                    <div class=\\\"col-lg-6 col-md-4 topgap\\\">\\n                      <label class=\\\"\\\">\\n                        State\\n                      </label>\\n                      <input type=\\\"text\\\" class=\\\"form-control m-input\\\" placeholder=\\\"Enter state name\\\"\\n                        name=\\\"shipping_state\\\" id=\\\"shipping_state\\\" value=\\\"{{state==null?null:state}}\\\"\\n                        formControlName=\\\"shipping_state\\\" required>\\n                    </div>\\n                    <ng-container *ngFor=\\\"let error of error_messages.shipping_state\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('shipping_state').hasError(error.type) &&\\n                    (addresForm.get('shipping_state').dirty || addresForm.get('shipping_state').touched)\\\">\\n                        {{ error.message }}\\n                      </div>\\n                    </ng-container>\\n                  </div>\\n                  <div class=\\\"form-group m-form__group row topgap\\\">\\n                    <div class=\\\"col-lg-6 col-md-4\\\">\\n                      <label>\\n                        Country\\n                      </label>\\n                      <input type=\\\"text\\\" name=\\\"shipping_country\\\" id=\\\"shipping_country\\\" class=\\\"form-control\\\"\\n                        value=\\\"{{country==null?null:country}}\\\" formControlName=\\\"shipping_country\\\" required>\\n                    </div>\\n                    <ng-container *ngFor=\\\"let error of error_messages.shipping_country\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('shipping_country').hasError(error.type) &&\\n                    (addresForm.get('shipping_country').dirty || addresForm.get('shipping_country').touched)\\\">\\n                        {{ error.message }}\\n                      </div>\\n                    </ng-container>\\n                    <div class=\\\"col-lg-6 col-md-4 topgap\\\">\\n                      <label class=\\\"\\\">\\n                        postcode\\n                      </label>\\n                      <input type=\\\"text\\\" class=\\\"form-control m-input\\\" placeholder=\\\"Enter postcode \\\"\\n                        name=\\\"shipping_postal_code\\\" id=\\\"shipping_postal_code\\\"\\n                        value=\\\"{{postal_code==null?null:postal_code}}\\\" formControlName=\\\"shipping_postal_code\\\" required>\\n                      <div class=\\\"clearfix\\\"></div>\\n                    </div>\\n                    <ng-container *ngFor=\\\"let error of error_messages.shipping_postal_code\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('shipping_postal_code').hasError(error.type) &&\\n                    (addresForm.get('shipping_postal_code').dirty || addresForm.get('shipping_postal_code').touched)\\\">\\n                        {{ error.message }}\\n                      </div>\\n                    </ng-container>\\n                  </div>\\n\\n                  <div class=\\\"form-group m-form__group row topgap\\\">\\n                    <div class=\\\"col-lg-6 col-md-4 topgap\\\">\\n                      <label class=\\\"\\\">\\n                        Mobile Number\\n                      </label>\\n                      <input type=\\\"text\\\" class=\\\"form-control m-input\\\" placeholder=\\\"Enter your mobile number\\\"\\n                        name=\\\"shipping_mobile\\\" id=\\\"shipping_mobile\\\" value=\\\"{{mobile==null?null:mobile}}\\\"\\n                        formControlName=\\\"shipping_mobile\\\" required>\\n                    </div>\\n                  </div>\\n                  <ng-container *ngFor=\\\"let error of error_messages.shipping_mobile\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"addresForm.get('shipping_mobile').hasError(error.type) &&\\n              (addresForm.get('shipping_mobile').dirty || addresForm.get('shipping_mobile').touched)\\\">\\n                      {{ error.message }}\\n                    </div>\\n                  </ng-container>\\n\\n                  <div class=\\\"m-form__actions m-form__actions\\\" style=\\\"text-align: center;\\\">\\n                    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [disabled]=addresForm.invalid>\\n                      Save\\n                    </button>\\n                  </div>\\n                </div>\\n              </form>\\n            </div>\\n            <!-- .postcontent end -->\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"<div class=\\\"header bg-gradient-danger py-7 py-lg-8\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"header-body text-center mb-7\\\">\\n      <div class=\\\"row justify-content-center\\\">\\n        <div class=\\\"col-lg-5 col-md-6\\\">\\n          <h1 class=\\\"text-white\\\">Welcome!</h1>\\n          <p class=\\\"text-lead text-light\\\"> login or create new account .</p>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"separator separator-bottom separator-skew zindex-100\\\">\\n    <svg x=\\\"0\\\" y=\\\"0\\\" viewBox=\\\"0 0 2560 100\\\" preserveAspectRatio=\\\"none\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n      <polygon class=\\\"fill-default\\\" points=\\\"2560 0 2560 100 0 100\\\"></polygon>\\n    </svg>\\n  </div>\\n</div>\\n<!-- Page content -->\\n<div class=\\\"container mt--8 pb-5\\\">\\n  <div class=\\\"row justify-content-center\\\">\\n    <div class=\\\"col-lg-5 col-md-7\\\">\\n      <div class=\\\"card bg-secondary shadow border-0\\\">\\n\\n        <div class=\\\"card-body px-lg-5 py-lg-5\\\">\\n          <div class=\\\"text-center text-muted mb-4\\\">\\n            <small> sign in </small>\\n          </div>\\n          <form [formGroup]=\\\"loginForm\\\">\\n            <div class=\\\"form-group mb-3\\\">\\n              <div class=\\\"input-group input-group-alternative\\\">\\n                <div class=\\\"input-group-prepend\\\">\\n                  <span class=\\\"input-group-text\\\"><i class=\\\"ni ni-email-83\\\"></i></span>\\n                </div>\\n                <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Enter Email\\\" name=\\\"email\\\" id=\\\"email\\\" required\\n                  formControlName=\\\"email\\\">\\n              </div>\\n              <div>\\n                <ng-container *ngFor=\\\"let error of error_messages.email\\\">\\n                  <div class=\\\"error-message\\\" *ngIf=\\\"loginForm.get('email').hasError(error.type) &&\\n                    (loginForm.get('email').dirty || loginForm.get('email').touched)\\\">\\n                    {{ error.message }}\\n                  </div>\\n                </ng-container>\\n              </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <div class=\\\"input-group input-group-alternative\\\">\\n                <div class=\\\"input-group-prepend\\\">\\n                  <span class=\\\"input-group-text\\\"><i class=\\\"ni ni-lock-circle-open\\\"></i></span>\\n                </div>\\n                <input class=\\\"form-control\\\" type=\\\"password\\\" placeholder=\\\"Enter Password\\\" name=\\\"psw\\\" id=\\\"psw\\\" required\\n                  formControlName=\\\"password\\\">\\n              </div>\\n              <div>\\n                <ng-container *ngFor=\\\"let error of error_messages.password\\\">\\n                  <div class=\\\"error-message\\\"\\n                    *ngIf=\\\"loginForm.get('password').hasError(error.type) && (loginForm.get('password').dirty || loginForm.get('password').touched)\\\">\\n                    {{ error.message }}\\n                  </div>\\n                </ng-container>\\n              </div>\\n            </div>\\n            <div class=\\\"custom-control custom-control-alternative custom-checkbox\\\">\\n              <input class=\\\"custom-control-input\\\" id=\\\" customCheckLogin\\\" type=\\\"checkbox\\\">\\n              <label class=\\\"custom-control-label\\\" for=\\\" customCheckLogin\\\">\\n                <span class=\\\"text-muted\\\">Remember me</span>\\n              </label>\\n            </div>\\n            <div class=\\\"text-center\\\">\\n              <button type=\\\"button\\\" class=\\\"btn btn-primary my-4\\\" (click)=\\\"doLogin()\\\">Sign in</button>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n      <div class=\\\"row mt-3\\\">\\n        <div class=\\\"col-6\\\">\\n          <a [routerLink]=\\\"['/reset']\\\" class=\\\"text-light\\\"><small>Forgot password?</small></a>\\n        </div>\\n        <div class=\\\"col-6 text-right\\\">\\n          <a [routerLink]=\\\"['/register']\\\" class=\\\"text-light\\\"><small>Create new account</small></a>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"<div class=\\\"header bg-gradient-danger py-7 py-lg-8\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"header-body text-center mb-7\\\">\\n      <div class=\\\"row justify-content-center\\\">\\n        <div class=\\\"col-lg-5 col-md-6\\\">\\n          <h1 class=\\\"text-white\\\">Welcome!</h1>\\n          <p class=\\\"text-lead text-light\\\"> login or create new account .</p>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"separator separator-bottom separator-skew zindex-100\\\">\\n    <svg x=\\\"0\\\" y=\\\"0\\\" viewBox=\\\"0 0 2560 100\\\" preserveAspectRatio=\\\"none\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n      <polygon class=\\\"fill-default\\\" points=\\\"2560 0 2560 100 0 100\\\"></polygon>\\n    </svg>\\n  </div>\\n</div>\\n<!-- Page content -->\\n<div class=\\\"container mt--8 pb-5\\\">\\n  <!-- Table -->\\n  <div class=\\\"row justify-content-center\\\">\\n    <div class=\\\"col-lg-6 col-md-8\\\">\\n      <div class=\\\"card bg-secondary shadow border-0\\\">\\n        \\n        <div class=\\\"card-body px-lg-5 py-lg-5\\\">\\n          <div class=\\\"text-center text-muted mb-4\\\">\\n            <small> sign up </small>\\n          </div>\\n          <form [formGroup]=\\\"signUpForm\\\" (ngSubmit)=\\\"doRegister()\\\">\\n            <div class=\\\"form-group\\\">\\n              <div class=\\\"input-group input-group-alternative mb-3\\\">\\n                <div class=\\\"input-group-prepend\\\">\\n                  <span class=\\\"input-group-text\\\"><i class=\\\"ni ni-hat-3\\\"></i></span>\\n                </div>\\n                <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Enter First Name\\\" name=\\\"fname\\\" id=\\\"fname\\\" required\\n            formControlName=\\\"fname\\\">\\n              </div>\\n              <div>\\n                <ng-container *ngFor=\\\"let error of error_messages.fname\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"signUpForm.get('fname').hasError(error.type) &&\\n            (signUpForm.get('fname').dirty || signUpForm.get('fname').touched)\\\">\\n                        {{ error.message }}\\n                    </div>\\n                </ng-container>\\n            </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <div class=\\\"input-group input-group-alternative mb-3\\\">\\n                <div class=\\\"input-group-prepend\\\">\\n                  <span class=\\\"input-group-text\\\"><i class=\\\"ni ni-hat-3\\\"></i></span>\\n                </div>\\n                <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Enter Last Name\\\" name=\\\"lname\\\" id=\\\"lname\\\" required\\n            formControlName=\\\"lname\\\">\\n              </div>\\n              <div>\\n                <ng-container *ngFor=\\\"let error of error_messages.lname\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"signUpForm.get('lname').hasError(error.type) &&\\n            (signUpForm.get('lname').dirty || signUpForm.get('lname').touched)\\\">\\n                        {{ error.message }}\\n                    </div>\\n                </ng-container>\\n            </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <div class=\\\"input-group input-group-alternative mb-3\\\">\\n                <div class=\\\"input-group-prepend\\\">\\n                  <span class=\\\"input-group-text\\\"><i class=\\\"ni ni-hat-3\\\"></i></span>\\n                </div>\\n                <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Enter mobile\\\" name=\\\"mobile\\\" id=\\\"mobile\\\" required formControlName=\\\"mobile\\\">\\n              </div>\\n              <div>\\n                <ng-container *ngFor=\\\"let error of error_messages.mobile\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"signUpForm.get('mobile').hasError(error.type) &&\\n            (signUpForm.get('mobile').dirty || signUpForm.get('mobile').touched)\\\">\\n                        {{ error.message }}\\n                    </div>\\n                </ng-container>\\n            </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <div class=\\\"input-group input-group-alternative mb-3\\\">\\n                <div class=\\\"input-group-prepend\\\">\\n                  <span class=\\\"input-group-text\\\"><i class=\\\"ni ni-email-83\\\"></i></span>\\n                </div>\\n                <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Enter Email\\\" name=\\\"email\\\" id=\\\"email\\\" required formControlName=\\\"email\\\">\\n              </div>\\n              <div>\\n                <ng-container *ngFor=\\\"let error of error_messages.email\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"signUpForm.get('email').hasError(error.type) &&\\n            (signUpForm.get('email').dirty || signUpForm.get('email').touched)\\\">\\n                        {{ error.message }}\\n                    </div>\\n                </ng-container>\\n            </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <div class=\\\"input-group input-group-alternative\\\">\\n                <div class=\\\"input-group-prepend\\\">\\n                  <span class=\\\"input-group-text\\\"><i class=\\\"ni ni-lock-circle-open\\\"></i></span>\\n                </div>\\n                <input class=\\\"form-control\\\" type=\\\"password\\\" placeholder=\\\"Enter Password\\\" name=\\\"psw\\\" id=\\\"psw\\\" required formControlName=\\\"password\\\">\\n              </div>\\n              <div>\\n                <ng-container *ngFor=\\\"let error of error_messages.password\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"signUpForm.get('password').hasError(error.type) &&\\n            (signUpForm.get('password').dirty || signUpForm.get('password').touched)\\\">\\n                        {{ error.message }}\\n                    </div>\\n                </ng-container>\\n            </div>\\n            </div>\\n            <!-- <input type=\\\"hidden\\\" placeholder=\\\"enter the project_id \\\" name=\\\"psw\\\" id=\\\"psw\\\" required formControlName=\\\"project_id\\\"> -->\\n            <div class=\\\"text-muted font-italic\\\"><small>password strength: <span class=\\\"text-success font-weight-700\\\">strong</span></small></div>\\n            <div class=\\\"row my-4\\\">\\n              <div class=\\\"col-12\\\">\\n                <div class=\\\"custom-control custom-control-alternative custom-checkbox\\\">\\n                  <input class=\\\"custom-control-input\\\" id=\\\"customCheckRegister\\\" type=\\\"checkbox\\\">\\n                  <label class=\\\"custom-control-label\\\" for=\\\"customCheckRegister\\\">\\n                    <span class=\\\"text-muted\\\">I agree with the <a href=\\\"#!\\\">Privacy Policy</a></span>\\n                  </label>\\n                </div>\\n              </div>\\n            </div>\\n            <div class=\\\"text-center\\\">\\n              <button type=\\\"submit\\\" class=\\\"btn btn-primary mt-4\\\" [disabled]=signUpForm.invalid>Create account</button>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"\\n<div class=\\\"header bg-gradient-danger py-7 py-lg-8\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"header-body text-center mb-7\\\">\\n        <div class=\\\"row justify-content-center\\\">\\n          <div class=\\\"col-lg-5 col-md-6\\\">\\n            <h1 class=\\\"text-white\\\">Welcome!</h1>\\n            <p class=\\\"text-lead text-light\\\">reset account .</p>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"separator separator-bottom separator-skew zindex-100\\\">\\n      <svg x=\\\"0\\\" y=\\\"0\\\" viewBox=\\\"0 0 2560 100\\\" preserveAspectRatio=\\\"none\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n        <polygon class=\\\"fill-default\\\" points=\\\"2560 0 2560 100 0 100\\\"></polygon>\\n      </svg>\\n    </div>\\n  </div>\\n  <!-- Page content -->\\n  <div class=\\\"container mt--8 pb-5\\\">\\n    <div class=\\\"row justify-content-center\\\">\\n      <div class=\\\"col-lg-5 col-md-7\\\">\\n        <div class=\\\"card bg-secondary shadow border-0\\\">\\n          \\n          <div class=\\\"card-body px-lg-5 py-lg-5\\\">\\n            <div class=\\\"text-center text-muted mb-4\\\">\\n              <small> reset password</small>\\n            </div>\\n            <form [formGroup]=\\\"loginForm\\\">\\n              <div class=\\\"form-group mb-3\\\">\\n                <div class=\\\"input-group input-group-alternative\\\">\\n                  <div class=\\\"input-group-prepend\\\">\\n                    <span class=\\\"input-group-text\\\"><i class=\\\"ni ni-email-83\\\"></i></span>\\n                  </div>\\n                  <input class=\\\"form-control\\\"  type=\\\"text\\\" placeholder=\\\"Enter Email\\\" name=\\\"email\\\" id=\\\"email\\\" required formControlName=\\\"email\\\">\\n                </div>\\n                <div>\\n                  <ng-container *ngFor=\\\"let error of error_messages.email\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"loginForm.get('email').hasError(error.type) &&\\n                      (loginForm.get('email').dirty || loginForm.get('email').touched)\\\">\\n                          {{ error.message }}\\n                      </div>\\n                  </ng-container>\\n              </div>\\n              </div>\\n              \\n              \\n              <div class=\\\"text-center\\\">\\n                <button type=\\\"button\\\" class=\\\"btn btn-primary my-4\\\" (click)=\\\"doLogin()\\\">RESET</button>\\n              </div>\\n            </form>\\n          </div>\\n        </div>\\n        <div class=\\\"row mt-3\\\">\\n          <div class=\\\"col-6\\\">\\n            <a [routerLink]=\\\"['/login']\\\" class=\\\"text-light\\\"><small>Login</small></a>\\n          </div>\\n          <div class=\\\"col-6 text-right\\\">\\n            <a [routerLink]=\\\"['/register']\\\" class=\\\"text-light\\\"><small>Create new account</small></a>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  \"","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AuthLayoutRoutes } from './auth-layout.routing';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { HttpClientModule } from '@angular/common/http';\n//import { RouterModule } from '@angular/router';\nimport { LoginComponent } from '../../pages/login/login.component';\nimport { RegisterComponent } from '../../pages/register/register.component';\nimport { AddAddressComponent } from '../../pages/add-address/add-address.component';\nimport { ResetpasswordComponent } from '../../pages/resetpassword/resetpassword.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(AuthLayoutRoutes),\n    FormsModule,\n    // NgbModule\n    ReactiveFormsModule,\n    HttpClientModule\n    \n  ],\n  declarations: [\n    LoginComponent,\n    RegisterComponent,\n    AddAddressComponent,\n    ResetpasswordComponent\n  ]\n})\nexport class AuthLayoutModule { }\n","import { Routes } from '@angular/router';\n\nimport { LoginComponent } from '../../pages/login/login.component';\nimport { RegisterComponent } from '../../pages/register/register.component';\nimport { AddAddressComponent } from '../../pages/add-address/add-address.component';\nimport { ResetpasswordComponent } from '../../pages/resetpassword/resetpassword.component';\nexport const AuthLayoutRoutes: Routes = [\n    { path: 'login',          component: LoginComponent },\n    { path: 'register',       component: RegisterComponent },\n    { path: 'addaddress',       component: AddAddressComponent },\n    { path: 'reset',       component: ResetpasswordComponent  },\n];\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2FkZC1hZGRyZXNzL2FkZC1hZGRyZXNzLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators, } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-add-address',\n  templateUrl: './add-address.component.html',\n  styleUrls: ['./add-address.component.css']\n})\nexport class AddAddressComponent implements OnInit {\n\n  addresForm: FormGroup;\n  error_messages: any = {};\n  params: any;\n\n  constructor(\n    public formBuilder: FormBuilder,\n    private http: HttpClient,\n    public router: Router\n  ) {\n    this.setupAddressFormData();\n  }\n  fname = '';\n  lname = '';\n  address = '';\n  address2 = '';\n  city = '';\n  state = '';\n  country = '';\n  mobile = '';\n  postal_code = '';\n\n  checkvalue(event) {\n    if (event.target.value == 'yes') {\n      //this.addressForm.value.fname=this.addressForm.value.fname\n      //this.addressForm.value.fname=this.addressForm.value.fname\n      (this.fname = this.addresForm.controls.fname.value),\n        (this.lname = this.addresForm.controls.lname.value),\n        (this.address = this.addresForm.controls.address.value),\n        (this.address2 = this.addresForm.controls.address2.value),\n        (this.city = this.addresForm.controls.city.value),\n        (this.state = this.addresForm.controls.state.value),\n        (this.country = this.addresForm.controls.country.value),\n        (this.mobile = this.addresForm.controls.mobile.value),\n        (this.postal_code = this.addresForm.controls.postal_code.value);\n    } else {\n      (this.fname = null),\n        (this.lname = null),\n        (this.address = null),\n        (this.address2 = null),\n        (this.city = null),\n        (this.state = null),\n        (this.country = null),\n        (this.mobile = null),\n        (this.postal_code = null);\n    }\n  }\n\n  setupAddressFormData() {\n    this.error_messages = {\n      fname: [{ type: 'required', message: 'First Name is Required' }],\n      lname: [{ type: 'required', message: 'lname is Required' }],\n\n      address: [{ type: 'required', message: 'address  is required.' }],\n      address2: [{ type: 'required', message: 'address2  is required.' }],\n      city: [{ type: 'required', message: 'city  is required.' }],\n      state: [{ type: 'required', message: 'state  is required.' }],\n      country: [{ type: 'required', message: 'country  is required.' }],\n      postal_code: [{ type: 'required', message: 'postal code  is required.' }],\n      mobile: [\n        { type: 'required', message: 'mobile Number  is required.' },\n        { type: 'minlength', message: 'minimun length should be 10 .' },\n        { type: 'maxlength', message: 'maximum length should be 12 .' },\n      ],\n\n      shipping_fname: [{ type: 'required', message: 'First Name is Required' }],\n      shipping_lname: [{ type: 'required', message: 'lname is Required' }],\n\n      shipping_address: [{ type: 'required', message: 'address  is required.' }],\n      shipping_address2: [{ type: 'required', message: 'address2  is required.' }],\n      shipping_city: [{ type: 'required', message: 'city  is required.' }],\n      shipping_state: [{ type: 'required', message: 'state  is required.' }],\n      shipping_country: [{ type: 'required', message: 'country  is required.' }],\n      shipping_postal_code: [\n        { type: 'required', message: 'postal code  is required.' },\n      ],\n      shipping_mobile: [\n        { type: 'required', message: 'mobile Number  is required.' },\n        { type: 'minlength', message: 'minimun length should be 10 .' },\n        { type: 'maxlength', message: 'maximum length should be 12 .' },\n      ],\n      // owner: [\n      //   { type: 'required', message: 'mobile Number  is required.' },\n\n      // ],\n    };\n    this.addresForm = this.formBuilder.group({\n      fname: new FormControl('', Validators.compose([Validators.required])),\n      lname: new FormControl('', Validators.compose([Validators.required])),\n\n      address: new FormControl('', Validators.compose([Validators.required])),\n      address2: new FormControl('', Validators.compose([Validators.required])),\n      city: new FormControl('', Validators.compose([Validators.required])),\n      state: new FormControl('', Validators.compose([Validators.required])),\n      country: new FormControl('', Validators.compose([Validators.required])),\n      postal_code: new FormControl(\n        '',\n        Validators.compose([Validators.required])\n      ),\n      mobile: new FormControl(\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(12),\n        ])\n      ),\n      shipping_fname: new FormControl('', Validators.compose([Validators.required])),\n      shipping_lname: new FormControl('', Validators.compose([Validators.required])),\n\n      shipping_address: new FormControl('', Validators.compose([Validators.required])),\n      shipping_address2: new FormControl('', Validators.compose([Validators.required])),\n      shipping_city: new FormControl('', Validators.compose([Validators.required])),\n      shipping_state: new FormControl('', Validators.compose([Validators.required])),\n      shipping_country: new FormControl('', Validators.compose([Validators.required])),\n      shipping_postal_code: new FormControl(\n        '',\n        Validators.compose([Validators.required])\n      ),\n      shipping_mobile: new FormControl(\n        '',\n        Validators.compose([\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(12),\n        ])\n      ),\n\n    });\n  }\n  ngOnInit(): void { }\n  addres() {\n    this.params = {\n      fname: this.addresForm.controls.fname.value,\n      lname: this.addresForm.controls.lname.value,\n      address: this.addresForm.controls.address.value,\n      address2: this.addresForm.controls.address2.value,\n      mobile: this.addresForm.controls.mobile.value,\n\n      city: this.addresForm.controls.city.value,\n      state: this.addresForm.controls.state.value,\n      country: this.addresForm.controls.country.value,\n      postal_code: this.addresForm.controls.postal_code.value,\n\n      shipping_fname:\n        this.addresForm.controls.shipping_fname.value == ''\n          ? this.fname\n          : this.addresForm.controls.shipping_fname.value,\n\n      shipping_lname:\n        this.addresForm.controls.shipping_lname.value == ''\n          ? this.lname\n          : this.addresForm.controls.shipping_lname.value,\n\n      shipping_address:\n        this.addresForm.controls.shipping_address.value == ''\n          ? this.address\n          : this.addresForm.controls.shipping_address.value,\n\n      shipping_address2:\n        this.addresForm.controls.shipping_address2.value == ''\n          ? this.address2\n          : this.addresForm.controls.shipping_address2.value,\n\n      shipping_mobile:\n        this.addresForm.controls.shipping_mobile.value == ''\n          ? this.mobile\n          : this.addresForm.controls.shipping_mobile.value,\n\n      shipping_city:\n        this.addresForm.controls.shipping_city.value == ''\n          ? this.city\n          : this.addresForm.controls.shipping_city.value,\n\n      shipping_state:\n        this.addresForm.controls.shipping_state.value == ''\n          ? this.state\n          : this.addresForm.controls.shipping_state.value,\n\n      shipping_country:\n        this.addresForm.controls.shipping_country.value == ''\n          ? this.country\n          : this.addresForm.controls.shipping_country.value,\n\n      shipping_postal_code:\n        this.addresForm.controls.shipping_postal_code.value == ''\n          ? this.postal_code\n          : this.addresForm.controls.shipping_postal_code.value,\n      // owner: \"5f32ca5c8f33c3b541702c12\"\n    };\n    //console.log(this.params);\n    return new Promise((resolve, reject) => {\n      this.http.post(\"https://api.80startups.com/shipping/createShipping\", this.params).subscribe(result => {\n        console.log(\"result\", result);\n        this.router.navigateByUrl('/dashboard')\n      },\n        err => {\n          console.log(err);\n          alert(\"please enter fill \");\n          // reject(err);\n        }\n      );\n    });\n\n\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n  error_messages: any = {};\n  params: any;\n  constructor(public router: Router, public formBuilder: FormBuilder, private http: HttpClient) {\n    this.setupLoginFormData();\n  }\n\n  ngOnInit(): void {\n  }\n  setupLoginFormData() {\n    this.error_messages = {\n      email: [\n        { type: \"required\", message: 'Email is Required' },\n        { type: \"pattern\", message: 'Please Enter valid Email' }\n      ],\n\n      password: [\n        { type: \"required\", message: 'Password is Required' }\n      ],\n    };\n    this.loginForm = this.formBuilder.group(\n      {\n        email: new FormControl(\n          \"\",\n          Validators.compose([\n            Validators.required,\n            Validators.pattern('^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$'),\n          ])\n        ),\n        password: new FormControl(\n          \"\",\n          Validators.compose([\n            Validators.required,\n          ])\n        ),\n      },\n    );\n  }\n\n  doLogin() {\n    this.params = {\n      \"email\": this.loginForm.value.email,\n      \"password\": this.loginForm.value.password,\n      // \"projectid\": \" 1\",\n    }\n    return new Promise((resolve, reject) => {\n      this.http.post(\"https://labs.80startups.com/api/v1/1/user/loginUser\", this.params).subscribe(result => {\n        console.log(result, \"result\");\n        // localStorage.setItem('token', JSON.stringify(result['users'].tokens))\n\n        this.router.navigateByUrl('/dashboard');\n      },\n        err => {\n          console.log(err);\n          alert(\"please enter correct email and password\");\n        }\n      );\n    });\n  }\n\n  register() {\n    console.log(\"register\");\n    this.router.navigateByUrl('/register');\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3JlZ2lzdGVyL3JlZ2lzdGVyLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  signUpForm: FormGroup;\n  error_messages: any = {};\n  params: any;\n  constructor(public router: Router,\n    public formBuilder: FormBuilder, private http: HttpClient) {\n    this.setupLoginFormData();\n  }\n\n  ngOnInit(): void {\n  }\n  setupLoginFormData() {\n    this.error_messages = {\n\n\n      fname: [\n        { type: \"required\", message: 'First Name is Required' }\n      ],\n      lname: [\n        { type: \"required\", message: 'lname is Required' }\n      ],\n      phone: [\n        { type: \"required\", message: \"Phone Number  is required.\" },\n        { type: \"minlength\", message: \"minimun length should be 10 .\" },\n        { type: \"maxlength\", message: \"maximum length should be 12 .\" }\n      ],\n      mobile: [\n        { type: \"required\", message: \"mobile Number  is required.\" },\n        { type: \"minlength\", message: \"minimun length should be 10 .\" },\n        { type: \"maxlength\", message: \"maximum length should be 12 .\" }\n      ],\n      email: [\n        { type: \"required\", message: 'Email is Required' },\n        { type: \"pattern\", message: 'Please Enter valid Email' }\n      ],\n\n      password: [\n        { type: \"required\", message: \"Password is Required.\" },\n        { type: \"minlength\", message: \"minimun length should be 8 .\" },\n        { type: \"maxlength\", message: \"maximum length should be 12 .\" }\n      ],\n      projectid: [\n        { type: \"required\", message: \"Password is Required.\" },\n      ]\n\n\n\n\n\n    };\n    this.signUpForm = this.formBuilder.group(\n      {\n        fname: new FormControl(\n          \"\",\n          Validators.compose([\n            Validators.required,\n          ])\n        ),\n        lname: new FormControl(\n          \"\",\n          Validators.compose([\n            Validators.required,\n          ])\n        ),\n\n        mobile: new FormControl(\n          \"\",\n          Validators.compose([\n            Validators.required,\n            Validators.minLength(10),\n            Validators.maxLength(12)\n          ])\n        ),\n        email: new FormControl(\n          \"\",\n          Validators.compose([\n            Validators.required,\n            Validators.pattern('^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$'),\n          ])\n        ),\n\n        password: new FormControl(\n          \"\",\n          Validators.compose([\n            Validators.required,\n            Validators.minLength(8),\n            Validators.maxLength(12)\n          ])\n        ),\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      },\n    );\n  }\n\n\n  doRegister() {\n\n\n    this.params = {\n      \"fname\": this.signUpForm.controls.fname.value,\n      \"lname\": this.signUpForm.controls.lname.value,\n      \"mobile\": this.signUpForm.controls.mobile.value,\n\n      \"email\": this.signUpForm.controls.email.value,\n      \"password\": this.signUpForm.controls.password.value,\n      \"projectid\": \"1\",\n\n\n\n    }\n    return new Promise((resolve, reject) => {\n      this.http.post(\"https://labs.80startups.com/api/v1/1/user/createUser\", this.params).subscribe(result => {\n        console.log(\"result\", result);\n        this.router.navigateByUrl('/login')\n      },\n        err => {\n          console.log(err);\n          alert(\"please enter email and password\");\n          // reject(err);\n        }\n      );\n    });\n  }\n\n  signin() {\n    this.router.navigateByUrl('/login');\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Jlc2V0cGFzc3dvcmQvcmVzZXRwYXNzd29yZC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-resetpassword',\n  templateUrl: './resetpassword.component.html',\n  styleUrls: ['./resetpassword.component.css']\n})\nexport class ResetpasswordComponent implements OnInit {\n\n  loginForm: FormGroup;\n  error_messages: any = {};\n  params: any;\n  constructor(public router: Router,public formBuilder: FormBuilder, private http: HttpClient) {\n    this.setupLoginFormData();\n   }\n\n  ngOnInit(): void {\n  }\n  setupLoginFormData() {\n    this.error_messages = {\n      email: [\n        { type: \"required\", message: 'Email is Required' },\n        { type: \"pattern\", message: 'Please Enter valid Email' }\n      ],\n\n      \n    };\n    this.loginForm = this.formBuilder.group(\n      {\n        email: new FormControl(\n          \"\",\n          Validators.compose([\n            Validators.required,\n            Validators.pattern('^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$'),\n          ])\n        ),\n        \n      },\n    );\n  }\n\n  doLogin() {\n    this.params = {\n      \"email\": this.loginForm.value.email,\n      \n    }\n    return new Promise((resolve, reject) => {\n      this.http.post(\"https://api.80startups.com/auth/loginUser/1\", this.params).subscribe(result => {\n        console.log(result,\"result\");\n        this.router.navigateByUrl('/AddAddress');\n      },\n        err => {\n          console.log(err);\n          alert(\"please enter correct email and password\");\n        }\n      );\n    });\n  }\n\n \n\n}\n"],"sourceRoot":"webpack:///"}